name: example oj python

on:
  push:
    branches:
      - master
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  COMPETITIVE_VERIFY_FILES_PATH: .competitive-verifier/tmp/py-verify-files.json
  COMPETITIVE_VERIFY_RESULT_PATH: .competitive-verifier/tmp/result
  PARALLEL_SIZE: 20

jobs:
  setup:
    runs-on: ubuntu-latest
    env:
      artifact-path: .competitive-verifier/tmp/
    outputs:
      verify-json: ${{ steps.create-json.outputs.verify-json }}
      hash: ${{ steps.create-hash.outputs.hash }}
      seq: ${{ steps.seq.outputs.value }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
      - name: Install competitive-verifier
        run: pip install git+https://github.com/competitive-verifier/competitive-verifier.git

      - name: Create verify-files.json
        id: create-json
        run: |
          delimiter=$(uuidgen)
          echo "verify-json<<$delimiter" >> $GITHUB_OUTPUT
          competitive-verifier oj-resolve >> $GITHUB_OUTPUT
          echo "$delimiter" >> $GITHUB_OUTPUT
      - name: Create hash
        id: create-hash
        run: |
          echo "hash=${{ hashFiles('**/*verify-files.json') }}" >> $GITHUB_OUTPUT

      - name: Parallel seq
        id: seq
        run: |
          echo "value<<EOF" >> $GITHUB_OUTPUT
          jq -nc '$ARGS.positional' --args $(seq -w 0 $((PARALLEL_SIZE-1))) >>$GITHUB_OUTPUT
          echo EOF >> $GITHUB_OUTPUT

  download:
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - uses: actions/checkout@v3
      - name: verify-files.json
        run: |
          mkdir -p $(dirname $COMPETITIVE_VERIFY_FILES_PATH)
          delimiter=$(uuidgen)
          cat - <<$delimiter > $COMPETITIVE_VERIFY_FILES_PATH
          ${{ needs.setup.outputs.verify-json }}
          $delimiter
      - name: Cache
        uses: actions/cache@v3
        with:
          path: .competitive-verifier/cache
          key: verifier-${{ runner.os }}-${{ needs.setup.outputs.hash }}
          restore-keys: |
            verifier-${{ runner.os }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
      - name: Install competitive-verifier
        run: pip install git+https://github.com/competitive-verifier/competitive-verifier.git

      - name: Run download
        run: competitive-verifier download

  verify:
    runs-on: ubuntu-latest
    needs: [setup, download]
    strategy:
      matrix:
        index: ${{fromJson(needs.setup.outputs.seq)}}
    outputs:
      verify-json: ${{ steps.verify.outputs.verify-result }}
    steps:
      - uses: actions/checkout@v3
      - name: verify-files.json
        run: |
          mkdir -p $(dirname $COMPETITIVE_VERIFY_FILES_PATH)
          delimiter=$(uuidgen)
          cat - <<$delimiter > $COMPETITIVE_VERIFY_FILES_PATH
          ${{ needs.setup.outputs.verify-json }}
          $delimiter

      - name: Cache
        uses: actions/cache@v3
        with:
          path: .competitive-verifier/cache
          key: verifier-${{ runner.os }}-${{ needs.setup.outputs.hash }}
          restore-keys: |
            verifier-${{ runner.os }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
      - name: Install competitive-verifier
        run: pip install git+https://github.com/competitive-verifier/competitive-verifier.git

      - name: Run verify
        id: verify
        run: |
          competitive-verifier verify --split 20 --split-index ${{ matrix.index }} --output ${COMPETITIVE_VERIFY_RESULT_PATH}/result.json
      - uses: actions/upload-artifact@v3
        with:
          name: result${{ matrix.index }}
          path: ${{env.COMPETITIVE_VERIFY_RESULT_PATH}}
          retention-days: 1

  docs:
    runs-on: ubuntu-latest
    needs: [setup, verify]
    steps:
      - uses: actions/checkout@v3

      - name: verify-files.json
        run: |
          mkdir -p $(dirname $COMPETITIVE_VERIFY_FILES_PATH)
          delimiter=$(uuidgen)
          cat - <<$delimiter > $COMPETITIVE_VERIFY_FILES_PATH
          ${{ needs.setup.outputs.verify-json }}
          $delimiter

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
      - name: Install competitive-verifier
        run: pip install git+https://github.com/competitive-verifier/competitive-verifier.git

      - uses: actions/download-artifact@v3
        with:
          path: ${{env.COMPETITIVE_VERIFY_RESULT_PATH}}
      - name: Delete Artifact
        uses: GeekyEggo/delete-artifact@v2.0.0
        with:
          name: result*
          failOnError: false

      - name: docs
        run: competitive-verifier docs ${COMPETITIVE_VERIFY_RESULT_PATH}/*/result.json --write-summary

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./_jekyll
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1

  deploy:
    if: github.ref == 'refs/heads/master'
    needs: docs
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
